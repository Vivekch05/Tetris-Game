{"version":3,"sources":["img/bg.gif","gameHelper.js","components/styles/StyledTetris.js","tetrominos.js","hooks/useStage.js","components/styles/StyledCell.js","components/Cell.js","components/styles/StyledStage.js","components/Stage.js","components/styles/StyledDisplay.js","components/Display.js","components/styles/StyledStartButton.js","components/StartButton.js","components/Footer.js","components/Header.js","components/Tetris.js","hooks/usePlayer.js","hooks/useGameStatus.js","hooks/useInterval.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","createStage","Array","from","fill","checkCollision","player","stage","moveX","x","moveY","y","tetromino","length","pos","StyledTetrisWrapper","styled","div","bgImage","StyledTetris","TETROMINOS","0","shape","color","I","J","L","O","S","T","Z","randomTetromino","randTetromino","Math","floor","random","useStage","resetPlayer","useState","setStage","rowsCleared","setRowsCleared","useEffect","updateStage","prevStage","newStage","map","row","cell","forEach","value","collided","reduce","ack","findIndex","prev","unshift","push","sweepRows","StyledCell","props","type","React","memo","console","log","StyledStage","height","width","Stage","key","StyledDisplay","gameOver","Display","text","StyledStartButton","button","StartButton","callback","onClick","Footer","className","style","fontWeight","Header","Tetris","dropTime","setDropTime","setGameOver","setPlayer","rotate","matrix","dir","mtrx","_","index","column","reverse","useCallback","STAGE_WIDTH","clonedPlayer","JSON","parse","stringify","offset","usePlayer","updatePlayerPos","playerRotate","score","setScore","rows","setRows","level","setLevel","linePoints","clacScore","useGameStatus","movePlayer","drop","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","move","keyCode","role","tabIndex","onKeyDown","e","onKeyUp","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ac920e09.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg.11c1f63b.gif\";","export const STAGE_WIDTH = 12;\r\nexport const STAGE_HEIGHT = 20;\r\n\r\nexport const createStage = () =>\r\n  Array.from(Array(STAGE_HEIGHT), () => Array(STAGE_WIDTH).fill([0, 'clear']));\r\n\r\nexport const checkCollision = (player, stage, { x: moveX, y: moveY }) => {\r\n  // THIS IS SLOWER!!!\r\n  // return player.tetromino.some((row, y) =>\r\n  //   row.some((cell, x) => {\r\n  //     if (cell !== 0) {\r\n  //       return (\r\n  //         !stage[y + player.pos.y + moveY] ||\r\n  //         !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] ||\r\n  //         stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !==\r\n  //           'clear'\r\n  //       );\r\n  //     }\r\n  //     return false;\r\n  //   })\r\n  // );\r\n\r\n  // Using for loops to be able to return (and break). Not possible with forEach\r\n  for (let y = 0; y < player.tetromino.length; y += 1) {\r\n    for (let x = 0; x < player.tetromino[y].length; x += 1) {\r\n      // 1. Check that we're on an actual Tetromino cell\r\n      if (player.tetromino[y][x] !== 0) {\r\n        if (\r\n          // 2. Check that our move is inside the game areas height (y)\r\n          // That we're not go through bottom of the play area\r\n          !stage[y + player.pos.y + moveY] ||\r\n          // 3. Check that our move is inside the game areas width (x)\r\n          !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] ||\r\n          // 4. Check that the cell wer'e moving to isn't set to clear\r\n          stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !==\r\n            'clear'\r\n        ) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  // 5. If everything above is false\r\n  return false;\r\n};","import styled from 'styled-components';\r\n\r\nimport bgImage from '../../img/bg.gif';\r\n\r\nexport const StyledTetrisWrapper = styled.div`\r\nwidth:100vw;\r\nheight:auto;\r\nbackground:url(${bgImage}) #000;\r\nbackground-size:cover;\r\noverflow:hidden;\r\n`\r\n\r\nexport const StyledTetris =styled.div`\r\ndisplay:flex;\r\nalign-items:flex-start;\r\npadding:30px;\r\nmargin:0 auto;\r\nmax-width:900px;\r\n\r\naside{\r\n    width:100%;\r\n    max-width:200px;\r\n    display:block;\r\n    padding:0 20px;\r\n}\r\n`\r\n","export const TETROMINOS={\r\n\r\n    0:{shape:[[0]],color:'0,0,0'},\r\n    I:{\r\n        shape:[\r\n            [0,'I',0,0],\r\n            [0,'I',0,0],\r\n            [0,'I',0,0],\r\n            [0,'I',0,0]\r\n        ],\r\n        color:'80,227,230',\r\n    },\r\n\r\n    J:{\r\n        shape:[\r\n            [0,'J',0],\r\n            [0,'J',0],\r\n            ['J','J',0]\r\n        ],\r\n        color:'36,95,223',\r\n    },\r\n\r\n    L:{\r\n        shape:[\r\n            [0,'L',0],\r\n            [0,'L',0],\r\n            [0,'L','L']\r\n        ],\r\n        color:'223,173,36',\r\n    },\r\n\r\n    O:{\r\n        shape:[\r\n            ['O','O'],\r\n            ['O','O']\r\n        ],\r\n        color:'223,217,36',\r\n    },\r\n\r\n    \r\n    S:{\r\n        shape:[\r\n            [0,'S','S'],\r\n            ['S','S',0],\r\n            [0, 0, 0]\r\n        ],\r\n        color:'48,211,56',\r\n    },\r\n\r\n    \r\nT:{\r\n        shape:[\r\n            ['T','T','T'],\r\n            [0,'T',0]\r\n        ],\r\n        color:'132,61,198',\r\n    },\r\n\r\n    \r\n    Z:{\r\n        shape:[\r\n            ['Z','Z',0],\r\n            [0,'Z','Z'],\r\n            [0, 0, 0]\r\n        ],\r\n        color:'227,78,78',\r\n    },\r\n}\r\n\r\nexport const randomTetromino = () =>{\r\n    const tetrominos = 'IJLOSTZ';\r\n    const randTetromino =\r\n    tetrominos[Math.floor(Math.random()*tetrominos.length)];\r\n    return TETROMINOS[randTetromino];\r\n}","import { useState, useEffect } from 'react';\r\nimport { createStage } from '../gameHelper';\r\n\r\nexport const useStage = (player, resetPlayer) => {\r\n  const [stage, setStage] = useState(createStage());\r\n  const [rowsCleared, setRowsCleared] = useState(0);\r\n\r\n  useEffect(() => {\r\n    setRowsCleared(0);\r\n    const sweepRows = newStage =>\r\n      newStage.reduce((ack, row) => {\r\n        if (row.findIndex(cell => cell[0] === 0) === -1) {\r\n          setRowsCleared(prev => prev + 1);\r\n          ack.unshift(new Array(newStage[0].length).fill([0, 'clear']));\r\n          return ack;\r\n        }\r\n        ack.push(row);\r\n        return ack;\r\n      }, []);\r\n\r\n    const updateStage = prevStage => {\r\n      // First flush the stage\r\n      const newStage = prevStage.map(row =>\r\n        row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell))\r\n      );\r\n\r\n      // Then draw the tetromino\r\n      player.tetromino.forEach((row, y) => {\r\n        row.forEach((value, x) => {\r\n          if (value !== 0) {\r\n            newStage[y + player.pos.y][x + player.pos.x] = [\r\n              value,\r\n              `${player.collided ? 'merged' : 'clear'}`,\r\n            ];\r\n          }\r\n        });\r\n      });\r\n      // Then check if we got some score if collided\r\n      if (player.collided) {\r\n        resetPlayer();\r\n        return sweepRows(newStage);\r\n      }\r\n      return newStage;\r\n    };\r\n\r\n    // Here are the updates\r\n    setStage(prev => updateStage(prev));\r\n  }, [\r\n    player.collided,\r\n    player.pos.x,\r\n    player.pos.y,\r\n    player.tetromino,\r\n    resetPlayer,\r\n  ]);\r\n\r\n  return [stage, setStage, rowsCleared];\r\n};","import styled from 'styled-components';\r\n\r\nexport const StyledCell = styled.div`\r\n  width: auto;\r\n  /* border-radius: 5px; */\r\n  background: rgba(${props => props.color}, 0.8);\r\n  border: ${props => (props.type === 0 ? '0px solid' : '4px solid red')};\r\n  border-bottom-color: rgba(${props => props.color}, 0.1);\r\n  border-right-color: rgba(${props => props.color}, 1);\r\n  border-top-color: rgba(${props => props.color}, 1);\r\n  border-left-color: rgba(${props => props.color}, 0.3);\r\n`;","import React from 'react';\r\nimport { StyledCell} from './styles/StyledCell';\r\nimport {TETROMINOS} from '../tetrominos';\r\n\r\nconst Cell=({type})=>{\r\n    return(\r\n    <StyledCell type={type} color={TETROMINOS[type].color}>{console.log(\"re render\")}</StyledCell>\r\n    )\r\n}\r\nexport default React.memo(Cell);","import styled from 'styled-components';\r\n\r\nexport const StyledStage = styled.div`\r\n  display: grid;\r\n  grid-template-rows: repeat(\r\n    ${props => props.height},\r\n    calc(25vw / ${props => props.width})\r\n  );\r\n  grid-template-columns: repeat(${props => props.width}, 1fr);\r\n  grid-gap: 1px;\r\n  border: 2px solid white;\r\n  width: 100%;\r\n  max-width: 25vw;\r\n  background: #111;\r\n`;","import React from 'react';\r\n\r\nimport Cell from './Cell';\r\nimport { StyledStage } from './styles/StyledStage';\r\nconst Stage = ({ stage }) => {\r\n    return (\r\n        <StyledStage width={stage[0].length} height={stage.length}>\r\n            {stage.map(row => row.map((cell, x) => <Cell key={x}\r\n                type={cell[0]} />))}\r\n        </StyledStage>\r\n    );\r\n}\r\nexport default Stage;","import styled from 'styled-components';\r\n\r\nexport const StyledDisplay =styled.div`\r\nbox-sizing:border-box;\r\ndisplay:flex;\r\nalign-items:center;\r\nmargin:0 0 20px 0;\r\npadding 20px;\r\nborder: 4px solid white;\r\nmin-height:30px;\r\nwidth:100%;\r\nborder-radius:20px;\r\ncolor:${props=>(props.gameOver ? 'red': 'white')};\r\nbackground:#000;\r\nfont-family:Pixel,Arial,Helvetica,sans-serif;\r\nfont-size:0.8rem;\r\n`;","import React from 'react';\r\nimport { StyledDisplay } from './styles/StyledDisplay';\r\nconst Display = ({ gameOver, text }) => {\r\n    return (\r\n        <StyledDisplay gameOver={gameOver}>\r\n            {text}\r\n        </StyledDisplay>\r\n    )\r\n}\r\nexport default Display;","import styled from 'styled-components';\r\n\r\nexport const StyledStartButton=styled.button`\r\nbox-sizing:border-box;\r\nmargin:0 0 20px 0;\r\npadding 20px;\r\nmin-height:30px;\r\nwidth:100%;\r\nborder-radius:20px;\r\nborder:none;\r\ncolor:white;\r\nbackground:#333;\r\nfont-famly:Pixel,Arial,Helvetica,sans-serif;\r\nfont-size:1rem;outline:none;\r\ncursor:pointer;\r\n`;","import React from 'react';\r\nimport {StyledStartButton} from './styles/StyledStartButton';\r\nconst StartButton=({callback})=>{\r\n    return(\r\n    <StyledStartButton onClick={callback}>Start Game</StyledStartButton>\r\n    )\r\n}\r\nexport default StartButton;","import React from 'react';\r\n//import {Link} from 'react-router-dom';\r\n//import bgImage1 from '../img/bg1.gif';\r\n\r\nconst Footer=()=> {\r\n  return (\r\n    <div className=\"footer\">\r\n      <p>Developed By:&nbsp;<span style={{color:\"red\",fontWeight:\"bold\"}}>Vivek Chaurasia,</span>&nbsp;Using &nbsp;<i className=\"fab fa-react\" />&nbsp; React JS ,&nbsp; Hooks,\r\n            &nbsp;Styled Components and some Gaming Concepts.</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Footer;","import React from 'react';\r\n//import { Link } from 'react-router-dom';\r\n\r\n\r\nconst Header = ()=> {\r\n  return (\r\n<div className=\"header\">\r\n  <h1>Hey Enjoy <span style={{color:\"red\"}}>Tetris</span> Game Sometimes <span style={{color:\"red\"}}>:)</span></h1>\r\n</div>\r\n  );\r\n}\r\nexport default Header;","import React, { useState } from 'react';\r\n\r\nimport { createStage, checkCollision } from '../gameHelper';\r\nimport { StyledTetrisWrapper, StyledTetris } from './styles/StyledTetris';\r\n\r\n// Custom Hooks\r\nimport { useInterval } from '../hooks/useInterval';\r\nimport { usePlayer } from '../hooks/usePlayer';\r\nimport { useStage } from '../hooks/useStage';\r\nimport { useGameStatus } from '../hooks/useGameStatus';\r\n\r\n// Components\r\nimport Stage from './Stage';\r\nimport Display from './Display';\r\nimport StartButton from './StartButton';\r\nimport Footer from './Footer';\r\nimport Header from './Header';\r\n\r\nconst Tetris = () => {\r\n  const [dropTime, setDropTime] = useState(null);\r\n  const [gameOver, setGameOver] = useState(false);\r\n\r\n  const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\r\n  const [stage, setStage, rowsCleared] = useStage(player, resetPlayer);\r\n  const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(\r\n    rowsCleared\r\n  );\r\n\r\n  console.log('re-render');\r\n\r\n  const movePlayer = dir => {\r\n    if (!checkCollision(player, stage, { x: dir, y: 0 })) {\r\n      updatePlayerPos({ x: dir, y: 0 });\r\n    }\r\n  };\r\n\r\n  const keyUp = ({ keyCode }) => {\r\n    if (!gameOver) {\r\n      // Activate the interval again when user releases down arrow.\r\n      if (keyCode === 40) {\r\n        setDropTime(1000 / (level + 1));\r\n      }\r\n    }\r\n  };\r\n\r\n  const startGame = () => {\r\n    // Reset everything\r\n    setStage(createStage());\r\n    setDropTime(1000);\r\n    resetPlayer();\r\n    setScore(0);\r\n    setLevel(0);\r\n    setRows(0);\r\n    setGameOver(false);\r\n  };\r\n\r\n  const drop = () => {\r\n    // Increase level when player has cleared 10 rows\r\n    if (rows > (level + 1) * 10) {\r\n      setLevel(prev => prev + 1);\r\n      // Also increase speed\r\n      setDropTime(1000 / (level + 1) + 200);\r\n    }\r\n\r\n    if (!checkCollision(player, stage, { x: 0, y: 2 })) {\r\n      updatePlayerPos({ x: 0, y: 1, collided: false });\r\n    } else {\r\n      // Game over!\r\n      if (player.pos.y < 1) {\r\n        console.log('GAME OVER!!!');\r\n        setGameOver(true);\r\n        setDropTime(null);\r\n      }\r\n      updatePlayerPos({ x: 0, y: 0, collided: true });\r\n    }\r\n  };\r\n\r\n  const dropPlayer = () => {\r\n    // We don't need to run the interval when we use the arrow down to\r\n    // move the tetromino downwards. So deactivate it for now.\r\n    setDropTime(null);\r\n    drop();\r\n  };\r\n\r\n  // This one starts the game\r\n  // Custom hook by Dan Abramov\r\n  useInterval(() => {\r\n    drop();\r\n  }, dropTime);\r\n\r\n  const move = ({ keyCode }) => {\r\n    if (!gameOver) {\r\n      if (keyCode === 37) {\r\n        movePlayer(-1);\r\n      } else if (keyCode === 39) {\r\n        movePlayer(1);\r\n      } else if (keyCode === 40) {\r\n        dropPlayer();\r\n      } else if (keyCode === 38) {\r\n        playerRotate(stage, 1);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <StyledTetrisWrapper\r\n      role=\"button\"\r\n      tabIndex=\"0\"\r\n      onKeyDown={e => move(e)}\r\n      onKeyUp={keyUp}\r\n    >\r\n      <Header/>  \r\n      <StyledTetris>\r\n        <Stage stage={stage} />\r\n        <aside>\r\n          {gameOver ? (\r\n            <Display gameOver={gameOver} text=\"Game Over\" />\r\n          ) : (\r\n            <div>\r\n              <Display text={`Score: ${score}`} />\r\n              <Display text={`Rows: ${rows}`} />\r\n              <Display text={`Level: ${level}`} />\r\n            </div>\r\n          )}\r\n          <StartButton callback={startGame} />\r\n        </aside>\r\n      </StyledTetris>\r\n      <Footer/>\r\n    </StyledTetrisWrapper>\r\n  );\r\n};\r\n\r\nexport default Tetris;","import { useState, useCallback } from 'react';\r\n\r\nimport { TETROMINOS, randomTetromino } from '../tetrominos';\r\nimport { STAGE_WIDTH, checkCollision } from '../gameHelper';\r\n\r\nexport const usePlayer = () => {\r\n  const [player, setPlayer] = useState({\r\n    pos: { x: 0, y: 0 },\r\n    tetromino: TETROMINOS[0].shape,\r\n    collided: false,\r\n  });\r\n\r\n  function rotate(matrix, dir) {\r\n    // Make the rows to become cols (transpose)\r\n    const mtrx = matrix.map((_, index) => matrix.map(column => column[index]));\r\n    // Reverse each row to get a rotaded matrix\r\n    if (dir > 0) return mtrx.map(row => row.reverse());\r\n    return mtrx.reverse();\r\n  }\r\n\r\n  function playerRotate(stage, dir) {\r\n    const clonedPlayer = JSON.parse(JSON.stringify(player));\r\n    clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\r\n\r\n    const pos = clonedPlayer.pos.x;\r\n    let offset = 1;\r\n    while (checkCollision(clonedPlayer, stage, { x: 0, y: 0 })) {\r\n      clonedPlayer.pos.x += offset;\r\n      offset = -(offset + (offset > 0 ? 1 : -1));\r\n      if (offset > clonedPlayer.tetromino[0].length) {\r\n        rotate(clonedPlayer.tetromino, -dir);\r\n        clonedPlayer.pos.x = pos;\r\n        return;\r\n      }\r\n    }\r\n    setPlayer(clonedPlayer);\r\n  }\r\n\r\n  const updatePlayerPos = ({ x, y, collided }) => {\r\n    setPlayer(prev => ({\r\n      ...prev,\r\n      pos: { x: (prev.pos.x += x), y: (prev.pos.y += y) },\r\n      collided,\r\n    }));\r\n  };\r\n\r\n  const resetPlayer = useCallback(() => {\r\n    setPlayer({\r\n      pos: { x: STAGE_WIDTH / 2 - 2, y: 0 },\r\n      tetromino: randomTetromino().shape,\r\n      collided: false,\r\n    });\r\n  }, []);\r\n\r\n  return [player, updatePlayerPos, resetPlayer, playerRotate];\r\n};","import {useState, useEffect, useCallback} from 'react';\r\n\r\nexport const useGameStatus = rowsCleared =>{\r\n    const [score,setScore]=useState(0);\r\n    const [rows,setRows]=useState(0);\r\n    const [level,setLevel]=useState(0);\r\n\r\n    const linePoints=[40,100,300,1200];\r\n\r\n    const clacScore =useCallback(()=>{\r\n        //we have score\r\n        if(rowsCleared>0){\r\n            //this is how original tetris score is calculated\r\n            setScore(prev =>prev + linePoints[rowsCleared -1]*(level+1));\r\n            setRows(prev=> prev+rowsCleared);\r\n\r\n        }\r\n    },[level,linePoints,rowsCleared]);\r\n\r\n    useEffect(()=>{\r\n        clacScore();\r\n    },[clacScore,rowsCleared,score]);\r\n    return[score,setScore,rows,setRows,level,setLevel];\r\n};","import { useEffect, useRef } from 'react';\r\n\r\nexport function useInterval(callback, delay) {\r\n  const savedCallback = useRef();\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current();\r\n    }\r\n    if (delay !== null) {\r\n      const id = setInterval(tick, delay);\r\n      return () => {\r\n        clearInterval(id);\r\n      };\r\n    }\r\n  }, [delay]);\r\n}","import React from 'react';\nimport './App.css';\nimport Tetris from './components/Tetris';\n\nconst App=()=>{\n  return (\n    <div className=\"App\">\n      <Tetris/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}